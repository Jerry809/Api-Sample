// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18052
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApiSample.Utility.Extensions.Test
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("驗證輸入資料功能", Description="提供給 UI層\r\n當系統傳入資料時，若驗證失敗傳回錯誤訊息，驗證成功則繼續進行Action", SourceFile="驗證輸入資料功能.feature", SourceLine=2)]
    [TechTalk.SpecRun.IgnoreAttribute()]
    public partial class 驗證輸入資料功能Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "驗證輸入資料功能.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("zh-TW"), "驗證輸入資料功能", "提供給 UI層\r\n當系統傳入資料時，若驗證失敗傳回錯誤訊息，驗證成功則繼續進行Action", ProgrammingLanguage.CSharp, new string[] {
                        "ignore"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("驗證失敗時，回傳驗證失敗訊息", SourceLine=6)]
        public virtual void 驗證失敗時回傳驗證失敗訊息()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證失敗時，回傳驗證失敗訊息", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("使用者輸入資料驗證失敗", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line 9
 testRunner.When("觸發驗證使用者傳入資料時", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line 10
 testRunner.Then("回傳驗證失敗訊息", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("驗證成功時，繼續執行Action", SourceLine=11)]
        public virtual void 驗證成功時繼續執行Action()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證成功時，繼續執行Action", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("使用者輸入資料驗證成功", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line 14
 testRunner.When("觸發驗證使用者傳入資料時", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line 15
 testRunner.Then("繼續執行Action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
